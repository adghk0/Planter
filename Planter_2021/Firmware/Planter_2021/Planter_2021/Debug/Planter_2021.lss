
Planter_2021.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000005d8  0000066c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000185  00800110  00800110  0000067c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001417  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a60  00000000  00000000  00001c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000978  00000000  00000000  0000268b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00003004  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a8  00000000  00000000  0000326c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000735  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003f49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_18>
  4c:	0c 94 84 01 	jmp	0x308	; 0x308 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 39       	cpi	r26, 0x95	; 149
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a7 02 	call	0x54e	; 0x54e <main>
  9e:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_send_cmd_4bit>:
{
	lcd_send_cmd(0x02);
}
void lcd_display(unsigned char display)
{
	lcd_send_cmd(0x08 | 0x04*display);
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	82 95       	swap	r24
  ac:	8f 70       	andi	r24, 0x0F	; 15
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <lcd_backlight>
  b4:	66 0f       	add	r22, r22
  b6:	66 0f       	add	r22, r22
  b8:	66 0f       	add	r22, r22
  ba:	87 e2       	ldi	r24, 0x27	; 39
  bc:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
  c0:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <lcd_backlight>
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	66 0f       	add	r22, r22
  cc:	77 1f       	adc	r23, r23
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	64 60       	ori	r22, 0x04	; 4
  d4:	87 e2       	ldi	r24, 0x27	; 39
  d6:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
  da:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <lcd_backlight>
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	8c 2b       	or	r24, r28
  ee:	68 2f       	mov	r22, r24
  f0:	64 60       	ori	r22, 0x04	; 4
  f2:	87 e2       	ldi	r24, 0x27	; 39
  f4:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
  f8:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <lcd_backlight>
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	66 0f       	add	r22, r22
 100:	77 1f       	adc	r23, r23
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	6c 2b       	or	r22, r28
 10c:	87 e2       	ldi	r24, 0x27	; 39
 10e:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9f e1       	ldi	r25, 0x1F	; 31
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_send_cmd_4bit+0x70>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_send_cmd_4bit+0x76>
 11c:	00 00       	nop
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <lcd_send_cmd>:
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_cmd_4bit>
 12c:	8c 2f       	mov	r24, r28
 12e:	82 95       	swap	r24
 130:	80 7f       	andi	r24, 0xF0	; 240
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_cmd_4bit>
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <lcd_move>:
 13a:	62 95       	swap	r22
 13c:	66 0f       	add	r22, r22
 13e:	66 0f       	add	r22, r22
 140:	60 7c       	andi	r22, 0xC0	; 192
 142:	86 2b       	or	r24, r22
 144:	80 68       	ori	r24, 0x80	; 128
 146:	0e 94 91 00 	call	0x122	; 0x122 <lcd_send_cmd>
 14a:	08 95       	ret

0000014c <lcd_send_data_4bit>:
{
	lcd_send_cmd_4bit(cmd & 0xf0);
	lcd_send_cmd_4bit((cmd << 4) & 0xf0);
}
void lcd_send_data_4bit(unsigned char data_half)
{
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
	twi_send_byte(LCD_ADDR, (1<<LCD_RS) | (lcd_backlight << LCD_BL));
 150:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <lcd_backlight>
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	61 60       	ori	r22, 0x01	; 1
 164:	87 e2       	ldi	r24, 0x27	; 39
 166:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
	twi_send_byte(LCD_ADDR, (1<<LCD_EN) | (1<<LCD_RS) | (lcd_backlight << LCD_BL));
 16a:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <lcd_backlight>
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	66 0f       	add	r22, r22
 172:	77 1f       	adc	r23, r23
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	65 60       	ori	r22, 0x05	; 5
 17e:	87 e2       	ldi	r24, 0x27	; 39
 180:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
	twi_send_byte(LCD_ADDR, data_half | (1<<LCD_EN) | (1<<LCD_RS) | (lcd_backlight << LCD_BL));
 184:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <lcd_backlight>
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	6c 2b       	or	r22, r28
 198:	65 60       	ori	r22, 0x05	; 5
 19a:	87 e2       	ldi	r24, 0x27	; 39
 19c:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
	twi_send_byte(LCD_ADDR, data_half | (1<<LCD_RS) | (lcd_backlight << LCD_BL));
 1a0:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <lcd_backlight>
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	66 0f       	add	r22, r22
 1a8:	77 1f       	adc	r23, r23
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	6c 2b       	or	r22, r28
 1b4:	61 60       	ori	r22, 0x01	; 1
 1b6:	87 e2       	ldi	r24, 0x27	; 39
 1b8:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	8f e3       	ldi	r24, 0x3F	; 63
 1be:	9f e1       	ldi	r25, 0x1F	; 31
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_send_data_4bit+0x74>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_send_data_4bit+0x7a>
 1c6:	00 00       	nop
	_delay_ms(2);
}
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <lcd_send_data>:
void lcd_send_data(char data)
{
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
	lcd_send_data_4bit(data & 0xf0);
 1d0:	80 7f       	andi	r24, 0xF0	; 240
 1d2:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_send_data_4bit>
	lcd_send_data_4bit((data << 4) & 0xf0);
 1d6:	8c 2f       	mov	r24, r28
 1d8:	82 95       	swap	r24
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_send_data_4bit>
}
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_send_string>:
void lcd_send_string(char* str)
{
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ec 01       	movw	r28, r24
	while(*str) lcd_send_data(*str++);
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <lcd_send_string+0xe>
 1ec:	21 96       	adiw	r28, 0x01	; 1
 1ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_send_data>
 1f2:	88 81       	ld	r24, Y
 1f4:	81 11       	cpse	r24, r1
 1f6:	fa cf       	rjmp	.-12     	; 0x1ec <lcd_send_string+0x8>
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <lcd_init>:

void lcd_init()
{
	twi_init();
 1fe:	0e 94 3f 01 	call	0x27e	; 0x27e <twi_init>
	
	// 4bit Power On
	lcd_backlight = 0;
 202:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <lcd_backlight>
	lcd_send_cmd_4bit(0x30);
 206:	80 e3       	ldi	r24, 0x30	; 48
 208:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_cmd_4bit>
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	89 ef       	ldi	r24, 0xF9	; 249
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <lcd_init+0x14>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x1e>
 21c:	00 00       	nop
	_delay_ms(20);
	lcd_send_cmd_4bit(0x30);
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_cmd_4bit>
 224:	8f e3       	ldi	r24, 0x3F	; 63
 226:	9c e9       	ldi	r25, 0x9C	; 156
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init+0x2a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_init+0x30>
 22e:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd_4bit(0x30);
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_cmd_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8f e1       	ldi	r24, 0x1F	; 31
 238:	93 e0       	ldi	r25, 0x03	; 3
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x3c>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x42>
 240:	00 00       	nop
	_delay_us(200);
	lcd_send_cmd_4bit(0x20);
 242:	80 e2       	ldi	r24, 0x20	; 32
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_cmd_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	8f e3       	ldi	r24, 0x3F	; 63
 24a:	9c e9       	ldi	r25, 0x9C	; 156
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_init+0x4e>
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_init+0x54>
 252:	00 00       	nop
	_delay_ms(10);
	
	// 4bit Initialize
	lcd_send_cmd(0x28); // Function set
 254:	88 e2       	ldi	r24, 0x28	; 40
 256:	0e 94 91 00 	call	0x122	; 0x122 <lcd_send_cmd>
	lcd_send_cmd(0x01); // Clear
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 91 00 	call	0x122	; 0x122 <lcd_send_cmd>
	lcd_send_cmd(0x06); // Entry set
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	0e 94 91 00 	call	0x122	; 0x122 <lcd_send_cmd>
	lcd_backlight = 1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <lcd_backlight>
	lcd_send_cmd(0x0c); // Display
 26c:	8c e0       	ldi	r24, 0x0C	; 12
 26e:	0e 94 91 00 	call	0x122	; 0x122 <lcd_send_cmd>
 272:	08 95       	ret

00000274 <_twi_wait>:

#include "twi.h"

void _twi_wait()
{
	while(!(TWCR & (1<<TWINT)));
 274:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 278:	88 23       	and	r24, r24
 27a:	e4 f7       	brge	.-8      	; 0x274 <_twi_wait>
}
 27c:	08 95       	ret

0000027e <twi_init>:

void twi_init()
{
	TWI_DDR &= ~TWI_MSK;
 27e:	87 b1       	in	r24, 0x07	; 7
 280:	8f 7c       	andi	r24, 0xCF	; 207
 282:	87 b9       	out	0x07, r24	; 7
	// set the Bit Rate
	TWBR = 12;
 284:	8c e0       	ldi	r24, 0x0C	; 12
 286:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0x00;
 28a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWCR = (1<<TWEN);
 28e:	84 e0       	ldi	r24, 0x04	; 4
 290:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 294:	08 95       	ret

00000296 <twi_send_byte>:
}

unsigned char twi_send_byte(unsigned char addr, unsigned char data)
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	c8 2f       	mov	r28, r24
 29c:	d6 2f       	mov	r29, r22
	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 29e:	84 ea       	ldi	r24, 0xA4	; 164
 2a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// wait for SEND
	_twi_wait();
 2a4:	0e 94 3a 01 	call	0x274	; 0x274 <_twi_wait>
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_START && (TWSR & TWI_STATUS) != TWI_REPEAT)
 2a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2ac:	88 7f       	andi	r24, 0xF8	; 248
 2ae:	88 30       	cpi	r24, 0x08	; 8
 2b0:	29 f0       	breq	.+10     	; 0x2bc <twi_send_byte+0x26>
 2b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2b6:	88 7f       	andi	r24, 0xF8	; 248
 2b8:	80 31       	cpi	r24, 0x10	; 16
 2ba:	f1 f4       	brne	.+60     	; 0x2f8 <twi_send_byte+0x62>
		return 1;
	
	// load address and write signal
	// ADDR | R=1(W=0)
	TWDR = addr << 1;
 2bc:	cc 0f       	add	r28, r28
 2be:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 2c2:	84 e8       	ldi	r24, 0x84	; 132
 2c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// wait for SEND
	_twi_wait();
 2c8:	0e 94 3a 01 	call	0x274	; 0x274 <_twi_wait>
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_W_ACK)
 2cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2d0:	88 7f       	andi	r24, 0xF8	; 248
 2d2:	88 31       	cpi	r24, 0x18	; 24
 2d4:	99 f4       	brne	.+38     	; 0x2fc <twi_send_byte+0x66>
		return 2;
	
	// load data
	TWDR = data;
 2d6:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 2da:	84 e8       	ldi	r24, 0x84	; 132
 2dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// wait for SEND
	_twi_wait();
 2e0:	0e 94 3a 01 	call	0x274	; 0x274 <_twi_wait>
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_WD_ACK)
 2e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2e8:	88 7f       	andi	r24, 0xF8	; 248
 2ea:	88 32       	cpi	r24, 0x28	; 40
 2ec:	49 f4       	brne	.+18     	; 0x300 <twi_send_byte+0x6a>
		return 3;
	
	// send STOP condition
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 2ee:	84 e9       	ldi	r24, 0x94	; 148
 2f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	return 0x00;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	05 c0       	rjmp	.+10     	; 0x302 <twi_send_byte+0x6c>
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for SEND
	_twi_wait();
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_START && (TWSR & TWI_STATUS) != TWI_REPEAT)
		return 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <twi_send_byte+0x6c>
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for SEND
	_twi_wait();
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_W_ACK)
		return 2;
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <twi_send_byte+0x6c>
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for SEND
	_twi_wait();
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_WD_ACK)
		return 3;
 300:	83 e0       	ldi	r24, 0x03	; 3
	
	// send STOP condition
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
	return 0x00;
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <__vector_19>:

	txBuffer[txBufferIdx++] = c;

	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<UDRIE0);

	SREG = sreg;
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	2f 93       	push	r18
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
 31c:	9f b7       	in	r25, 0x3f	; 63
 31e:	f8 94       	cli
 320:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <txBufferIdx>
 324:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <txBufferCur>
 328:	28 17       	cp	r18, r24
 32a:	71 f0       	breq	.+28     	; 0x348 <__vector_19+0x40>
 32c:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <txBufferCur>
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	ec 56       	subi	r30, 0x6C	; 108
 334:	fe 4f       	sbci	r31, 0xFE	; 254
 336:	80 81       	ld	r24, Z
 338:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 33c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <txBufferCur>
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <txBufferCur>
 346:	03 c0       	rjmp	.+6      	; 0x34e <__vector_19+0x46>
 348:	88 e9       	ldi	r24, 0x98	; 152
 34a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 34e:	9f bf       	out	0x3f, r25	; 63
 350:	ff 91       	pop	r31
 352:	ef 91       	pop	r30
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <__vector_18>:
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	8f 93       	push	r24
 370:	9f 93       	push	r25
 372:	ef 93       	push	r30
 374:	ff 93       	push	r31
 376:	9f b7       	in	r25, 0x3f	; 63
 378:	f8 94       	cli
 37a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	8e 0f       	add	r24, r30
 382:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 38c:	ee 5e       	subi	r30, 0xEE	; 238
 38e:	fe 4f       	sbci	r31, 0xFE	; 254
 390:	80 83       	st	Z, r24
 392:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <rxBufferIdx>
 396:	8f 77       	andi	r24, 0x7F	; 127
 398:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rxBufferIdx>
 39c:	9f bf       	out	0x3f, r25	; 63
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <uart_init>:
 3b0:	9b 01       	movw	r18, r22
 3b2:	ac 01       	movw	r20, r24
 3b4:	f8 94       	cli
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	79 e0       	ldi	r23, 0x09	; 9
 3ba:	8d e3       	ldi	r24, 0x3D	; 61
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 c8 02 	call	0x590	; 0x590 <__udivmodsi4>
 3c2:	da 01       	movw	r26, r20
 3c4:	c9 01       	movw	r24, r18
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	a1 09       	sbc	r26, r1
 3ca:	b1 09       	sbc	r27, r1
 3cc:	b6 95       	lsr	r27
 3ce:	a7 95       	ror	r26
 3d0:	97 95       	ror	r25
 3d2:	87 95       	ror	r24
 3d4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3e2:	88 e9       	ldi	r24, 0x98	; 152
 3e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 3e8:	86 e0       	ldi	r24, 0x06	; 6
 3ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3ee:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <txBufferCur>
 3f2:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <txBufferIdx>
 3f6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 3fa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rxBufferIdx>
 3fe:	78 94       	sei
 400:	08 95       	ret

00000402 <uart_put_string>:
 402:	dc 01       	movw	r26, r24
 404:	2f b7       	in	r18, 0x3f	; 63
 406:	f8 94       	cli
 408:	0b c0       	rjmp	.+22     	; 0x420 <uart_put_string+0x1e>
 40a:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <txBufferIdx>
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	9e 0f       	add	r25, r30
 412:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <txBufferIdx>
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	11 96       	adiw	r26, 0x01	; 1
 41a:	ec 56       	subi	r30, 0x6C	; 108
 41c:	fe 4f       	sbci	r31, 0xFE	; 254
 41e:	80 83       	st	Z, r24
 420:	8c 91       	ld	r24, X
 422:	81 11       	cpse	r24, r1
 424:	f2 cf       	rjmp	.-28     	; 0x40a <uart_put_string+0x8>
 426:	88 eb       	ldi	r24, 0xB8	; 184
 428:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 42c:	2f bf       	out	0x3f, r18	; 63
 42e:	08 95       	ret

00000430 <uart_get_char>:
}

uint8_t uart_get_char(void)
{
	if (rxBufferIdx == rxBufferCur) return 0;
 430:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rxBufferIdx>
 434:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 438:	98 17       	cp	r25, r24
 43a:	99 f0       	breq	.+38     	; 0x462 <uart_get_char+0x32>

	uint8_t c;
	uint8_t sreg=SREG;
 43c:	2f b7       	in	r18, 0x3f	; 63
	cli();
 43e:	f8 94       	cli

	c = rxBuffer[rxBufferIdx++];
 440:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <rxBufferIdx>
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	8e 0f       	add	r24, r30
 448:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rxBufferIdx>
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	ee 5e       	subi	r30, 0xEE	; 238
 450:	fe 4f       	sbci	r31, 0xFE	; 254
 452:	80 81       	ld	r24, Z

	rxBufferIdx &= (RX_BUFFER_SIZE-1);
 454:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rxBufferIdx>
 458:	9f 77       	andi	r25, 0x7F	; 127
 45a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rxBufferIdx>

	SREG=sreg;
 45e:	2f bf       	out	0x3f, r18	; 63

	return c;
 460:	08 95       	ret
	SREG = sreg;
}

uint8_t uart_get_char(void)
{
	if (rxBufferIdx == rxBufferCur) return 0;
 462:	80 e0       	ldi	r24, 0x00	; 0
	rxBufferIdx &= (RX_BUFFER_SIZE-1);

	SREG=sreg;

	return c;
}
 464:	08 95       	ret

00000466 <uart_available>:
uint8_t uart_available(void)
{
	uint8_t sreg = SREG;
 466:	2f b7       	in	r18, 0x3f	; 63
	cli();
 468:	f8 94       	cli
	
	uint8_t cur = rxBufferCur;
 46a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
	uint8_t idx = rxBufferIdx;
 46e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rxBufferIdx>
	uint8_t r = 0;

	if (idx - cur) {
 472:	89 17       	cp	r24, r25
 474:	19 f0       	breq	.+6      	; 0x47c <uart_available+0x16>
		cur += RX_BUFFER_SIZE;
 476:	80 58       	subi	r24, 0x80	; 128
		r = (cur - idx);
 478:	89 1b       	sub	r24, r25
 47a:	01 c0       	rjmp	.+2      	; 0x47e <uart_available+0x18>
	} else {
		r = (cur - idx);
 47c:	89 1b       	sub	r24, r25
	}

	SREG = sreg;
 47e:	2f bf       	out	0x3f, r18	; 63

	return r;
}
 480:	08 95       	ret

00000482 <test>:
#include "files/twi.h"
#include "files/lcd_twi.h"
#include "files/uart.h"

void test(char *cmd)
{
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	ec 01       	movw	r28, r24
	char read = 0;
	lcd_move(0, 0);
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_move>
	lcd_send_string("SEND-");
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_send_string>
	lcd_send_string(cmd);
 498:	ce 01       	movw	r24, r28
 49a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_send_string>
	
	uart_put_string(cmd);
 49e:	ce 01       	movw	r24, r28
 4a0:	0e 94 01 02 	call	0x402	; 0x402 <uart_put_string>
 4a4:	2f ef       	ldi	r18, 0xFF	; 255
 4a6:	81 ee       	ldi	r24, 0xE1	; 225
 4a8:	94 e0       	ldi	r25, 0x04	; 4
 4aa:	21 50       	subi	r18, 0x01	; 1
 4ac:	80 40       	sbci	r24, 0x00	; 0
 4ae:	90 40       	sbci	r25, 0x00	; 0
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <test+0x28>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <test+0x32>
 4b4:	00 00       	nop
 4b6:	40 c0       	rjmp	.+128    	; 0x538 <test+0xb6>
	
	
	_delay_ms(100);
	while(uart_available())
	{
		read = uart_get_char();
 4b8:	0e 94 18 02 	call	0x430	; 0x430 <uart_get_char>
 4bc:	d8 2f       	mov	r29, r24
		lcd_move(0, 1);
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_move>
		lcd_send_data(read);
 4c6:	8d 2f       	mov	r24, r29
 4c8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_send_data>
		lcd_send_data(read / 100 + '0');
 4cc:	89 e2       	ldi	r24, 0x29	; 41
 4ce:	d8 9f       	mul	r29, r24
 4d0:	81 2d       	mov	r24, r1
 4d2:	11 24       	eor	r1, r1
 4d4:	82 95       	swap	r24
 4d6:	8f 70       	andi	r24, 0x0F	; 15
 4d8:	80 5d       	subi	r24, 0xD0	; 208
 4da:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_send_data>
		lcd_send_data(read / 10 % 10 + '0');
 4de:	9d ec       	ldi	r25, 0xCD	; 205
 4e0:	d9 9f       	mul	r29, r25
 4e2:	c1 2d       	mov	r28, r1
 4e4:	11 24       	eor	r1, r1
 4e6:	c6 95       	lsr	r28
 4e8:	c6 95       	lsr	r28
 4ea:	c6 95       	lsr	r28
 4ec:	c9 9f       	mul	r28, r25
 4ee:	91 2d       	mov	r25, r1
 4f0:	11 24       	eor	r1, r1
 4f2:	96 95       	lsr	r25
 4f4:	96 95       	lsr	r25
 4f6:	96 95       	lsr	r25
 4f8:	99 0f       	add	r25, r25
 4fa:	89 2f       	mov	r24, r25
 4fc:	88 0f       	add	r24, r24
 4fe:	88 0f       	add	r24, r24
 500:	98 0f       	add	r25, r24
 502:	8c 2f       	mov	r24, r28
 504:	89 1b       	sub	r24, r25
 506:	80 5d       	subi	r24, 0xD0	; 208
 508:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_send_data>
		lcd_send_data(read % 10 + '0');
 50c:	cc 0f       	add	r28, r28
 50e:	8c 2f       	mov	r24, r28
 510:	88 0f       	add	r24, r24
 512:	88 0f       	add	r24, r24
 514:	c8 0f       	add	r28, r24
 516:	8d 2f       	mov	r24, r29
 518:	8c 1b       	sub	r24, r28
 51a:	80 5d       	subi	r24, 0xD0	; 208
 51c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_send_data>
		lcd_send_data(' ');
 520:	80 e2       	ldi	r24, 0x20	; 32
 522:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_send_data>
 526:	2f ef       	ldi	r18, 0xFF	; 255
 528:	83 ed       	ldi	r24, 0xD3	; 211
 52a:	90 e3       	ldi	r25, 0x30	; 48
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	80 40       	sbci	r24, 0x00	; 0
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <test+0xaa>
 534:	00 c0       	rjmp	.+0      	; 0x536 <test+0xb4>
 536:	00 00       	nop
	
	uart_put_string(cmd);
	
	
	_delay_ms(100);
	while(uart_available())
 538:	0e 94 33 02 	call	0x466	; 0x466 <uart_available>
 53c:	81 11       	cpse	r24, r1
 53e:	bc cf       	rjmp	.-136    	; 0x4b8 <test+0x36>
		lcd_send_data(read / 10 % 10 + '0');
		lcd_send_data(read % 10 + '0');
		lcd_send_data(' ');
		_delay_ms(1000);
	}
	lcd_send_string("    ");
 540:	86 e0       	ldi	r24, 0x06	; 6
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_send_string>
}
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <main>:

int main(void)
{
	int i = 0;
	char read;
	twi_init();
 54e:	0e 94 3f 01 	call	0x27e	; 0x27e <twi_init>
	lcd_init();
 552:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_init>
	uart_init(115200);
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	72 ec       	ldi	r23, 0xC2	; 194
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <uart_init>
 562:	2f ef       	ldi	r18, 0xFF	; 255
 564:	8b e7       	ldi	r24, 0x7B	; 123
 566:	92 e9       	ldi	r25, 0x92	; 146
 568:	21 50       	subi	r18, 0x01	; 1
 56a:	80 40       	sbci	r24, 0x00	; 0
 56c:	90 40       	sbci	r25, 0x00	; 0
 56e:	e1 f7       	brne	.-8      	; 0x568 <main+0x1a>
 570:	00 c0       	rjmp	.+0      	; 0x572 <main+0x24>
 572:	00 00       	nop
	
	_delay_ms(3000);
	while (1) 
    {
		test("AT\r\n");
 574:	8b e0       	ldi	r24, 0x0B	; 11
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	0e 94 41 02 	call	0x482	; 0x482 <test>
 57c:	2f ef       	ldi	r18, 0xFF	; 255
 57e:	83 e2       	ldi	r24, 0x23	; 35
 580:	94 ef       	ldi	r25, 0xF4	; 244
 582:	21 50       	subi	r18, 0x01	; 1
 584:	80 40       	sbci	r24, 0x00	; 0
 586:	90 40       	sbci	r25, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <main+0x34>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <main+0x3e>
 58c:	00 00       	nop
 58e:	f2 cf       	rjmp	.-28     	; 0x574 <main+0x26>

00000590 <__udivmodsi4>:
 590:	a1 e2       	ldi	r26, 0x21	; 33
 592:	1a 2e       	mov	r1, r26
 594:	aa 1b       	sub	r26, r26
 596:	bb 1b       	sub	r27, r27
 598:	fd 01       	movw	r30, r26
 59a:	0d c0       	rjmp	.+26     	; 0x5b6 <__udivmodsi4_ep>

0000059c <__udivmodsi4_loop>:
 59c:	aa 1f       	adc	r26, r26
 59e:	bb 1f       	adc	r27, r27
 5a0:	ee 1f       	adc	r30, r30
 5a2:	ff 1f       	adc	r31, r31
 5a4:	a2 17       	cp	r26, r18
 5a6:	b3 07       	cpc	r27, r19
 5a8:	e4 07       	cpc	r30, r20
 5aa:	f5 07       	cpc	r31, r21
 5ac:	20 f0       	brcs	.+8      	; 0x5b6 <__udivmodsi4_ep>
 5ae:	a2 1b       	sub	r26, r18
 5b0:	b3 0b       	sbc	r27, r19
 5b2:	e4 0b       	sbc	r30, r20
 5b4:	f5 0b       	sbc	r31, r21

000005b6 <__udivmodsi4_ep>:
 5b6:	66 1f       	adc	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	1a 94       	dec	r1
 5c0:	69 f7       	brne	.-38     	; 0x59c <__udivmodsi4_loop>
 5c2:	60 95       	com	r22
 5c4:	70 95       	com	r23
 5c6:	80 95       	com	r24
 5c8:	90 95       	com	r25
 5ca:	9b 01       	movw	r18, r22
 5cc:	ac 01       	movw	r20, r24
 5ce:	bd 01       	movw	r22, r26
 5d0:	cf 01       	movw	r24, r30
 5d2:	08 95       	ret

000005d4 <_exit>:
 5d4:	f8 94       	cli

000005d6 <__stop_program>:
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <__stop_program>
