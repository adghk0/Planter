
Planter_2021.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000332  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800120  00800120  000003e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e59  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000869  00000000  00000000  00001379  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063d  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00002220  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c1  00000000  00000000  00002394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043c  00000000  00000000  00002855  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002c91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 01 	call	0x308	; 0x308 <main>
  9e:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_send_cmd_4bit>:
{
	lcd_send_cmd(0x02);
}
void lcd_display(unsigned char display)
{
	lcd_send_cmd(0x08 | 0x04*display);
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	82 95       	swap	r24
  ac:	8f 70       	andi	r24, 0x0F	; 15
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
  b4:	66 0f       	add	r22, r22
  b6:	66 0f       	add	r22, r22
  b8:	66 0f       	add	r22, r22
  ba:	87 e2       	ldi	r24, 0x27	; 39
  bc:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
  c0:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	66 0f       	add	r22, r22
  cc:	77 1f       	adc	r23, r23
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	64 60       	ori	r22, 0x04	; 4
  d4:	87 e2       	ldi	r24, 0x27	; 39
  d6:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
  da:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	8c 2b       	or	r24, r28
  ee:	68 2f       	mov	r22, r24
  f0:	64 60       	ori	r22, 0x04	; 4
  f2:	87 e2       	ldi	r24, 0x27	; 39
  f4:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
  f8:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	66 0f       	add	r22, r22
 100:	77 1f       	adc	r23, r23
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	6c 2b       	or	r22, r28
 10c:	87 e2       	ldi	r24, 0x27	; 39
 10e:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9f e1       	ldi	r25, 0x1F	; 31
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_send_cmd_4bit+0x70>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_send_cmd_4bit+0x76>
 11c:	00 00       	nop
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <lcd_send_cmd>:
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_cmd_4bit>
 12c:	8c 2f       	mov	r24, r28
 12e:	82 95       	swap	r24
 130:	80 7f       	andi	r24, 0xF0	; 240
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_cmd_4bit>
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <lcd_move>:
 13a:	62 95       	swap	r22
 13c:	66 0f       	add	r22, r22
 13e:	66 0f       	add	r22, r22
 140:	60 7c       	andi	r22, 0xC0	; 192
 142:	86 2b       	or	r24, r22
 144:	80 68       	ori	r24, 0x80	; 128
 146:	0e 94 91 00 	call	0x122	; 0x122 <lcd_send_cmd>
 14a:	08 95       	ret

0000014c <lcd_send_data_4bit>:
{
	lcd_send_cmd_4bit(cmd & 0xf0);
	lcd_send_cmd_4bit((cmd << 4) & 0xf0);
}
void lcd_send_data_4bit(unsigned char data_half)
{
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
	twi_send_byte(LCD_ADDR, (1<<LCD_RS) | (lcd_backlight << LCD_BL));
 150:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	61 60       	ori	r22, 0x01	; 1
 164:	87 e2       	ldi	r24, 0x27	; 39
 166:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
	twi_send_byte(LCD_ADDR, (1<<LCD_EN) | (1<<LCD_RS) | (lcd_backlight << LCD_BL));
 16a:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	66 0f       	add	r22, r22
 172:	77 1f       	adc	r23, r23
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	65 60       	ori	r22, 0x05	; 5
 17e:	87 e2       	ldi	r24, 0x27	; 39
 180:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
	twi_send_byte(LCD_ADDR, data_half | (1<<LCD_EN) | (1<<LCD_RS) | (lcd_backlight << LCD_BL));
 184:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	6c 2b       	or	r22, r28
 198:	65 60       	ori	r22, 0x05	; 5
 19a:	87 e2       	ldi	r24, 0x27	; 39
 19c:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
	twi_send_byte(LCD_ADDR, data_half | (1<<LCD_RS) | (lcd_backlight << LCD_BL));
 1a0:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	66 0f       	add	r22, r22
 1a8:	77 1f       	adc	r23, r23
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	6c 2b       	or	r22, r28
 1b4:	61 60       	ori	r22, 0x01	; 1
 1b6:	87 e2       	ldi	r24, 0x27	; 39
 1b8:	0e 94 4b 01 	call	0x296	; 0x296 <twi_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	8f e3       	ldi	r24, 0x3F	; 63
 1be:	9f e1       	ldi	r25, 0x1F	; 31
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_send_data_4bit+0x74>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_send_data_4bit+0x7a>
 1c6:	00 00       	nop
	_delay_ms(2);
}
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <lcd_send_data>:
void lcd_send_data(char data)
{
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
	lcd_send_data_4bit(data & 0xf0);
 1d0:	80 7f       	andi	r24, 0xF0	; 240
 1d2:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_send_data_4bit>
	lcd_send_data_4bit((data << 4) & 0xf0);
 1d6:	8c 2f       	mov	r24, r28
 1d8:	82 95       	swap	r24
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_send_data_4bit>
}
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_send_string>:
void lcd_send_string(char* str)
{
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ec 01       	movw	r28, r24
	while(*str) lcd_send_data(*str++);
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <lcd_send_string+0xe>
 1ec:	21 96       	adiw	r28, 0x01	; 1
 1ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_send_data>
 1f2:	88 81       	ld	r24, Y
 1f4:	81 11       	cpse	r24, r1
 1f6:	fa cf       	rjmp	.-12     	; 0x1ec <lcd_send_string+0x8>
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <lcd_init>:

void lcd_init()
{
	twi_init();
 1fe:	0e 94 3f 01 	call	0x27e	; 0x27e <twi_init>
	
	// 4bit Power On
	lcd_backlight = 0;
 202:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
	lcd_send_cmd_4bit(0x30);
 206:	80 e3       	ldi	r24, 0x30	; 48
 208:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_cmd_4bit>
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	89 ef       	ldi	r24, 0xF9	; 249
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <lcd_init+0x14>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x1e>
 21c:	00 00       	nop
	_delay_ms(20);
	lcd_send_cmd_4bit(0x30);
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_cmd_4bit>
 224:	8f e3       	ldi	r24, 0x3F	; 63
 226:	9c e9       	ldi	r25, 0x9C	; 156
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init+0x2a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_init+0x30>
 22e:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd_4bit(0x30);
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_cmd_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8f e1       	ldi	r24, 0x1F	; 31
 238:	93 e0       	ldi	r25, 0x03	; 3
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x3c>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x42>
 240:	00 00       	nop
	_delay_us(200);
	lcd_send_cmd_4bit(0x20);
 242:	80 e2       	ldi	r24, 0x20	; 32
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_cmd_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	8f e3       	ldi	r24, 0x3F	; 63
 24a:	9c e9       	ldi	r25, 0x9C	; 156
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_init+0x4e>
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_init+0x54>
 252:	00 00       	nop
	_delay_ms(10);
	
	// 4bit Initialize
	lcd_send_cmd(0x28); // Function set
 254:	88 e2       	ldi	r24, 0x28	; 40
 256:	0e 94 91 00 	call	0x122	; 0x122 <lcd_send_cmd>
	lcd_send_cmd(0x01); // Clear
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 91 00 	call	0x122	; 0x122 <lcd_send_cmd>
	lcd_send_cmd(0x06); // Entry set
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	0e 94 91 00 	call	0x122	; 0x122 <lcd_send_cmd>
	lcd_backlight = 1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	lcd_send_cmd(0x0c); // Display
 26c:	8c e0       	ldi	r24, 0x0C	; 12
 26e:	0e 94 91 00 	call	0x122	; 0x122 <lcd_send_cmd>
 272:	08 95       	ret

00000274 <_twi_wait>:

#include "twi.h"

void _twi_wait()
{
	while(!(TWCR & (1<<TWINT)));
 274:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 278:	88 23       	and	r24, r24
 27a:	e4 f7       	brge	.-8      	; 0x274 <_twi_wait>
}
 27c:	08 95       	ret

0000027e <twi_init>:

void twi_init()
{
	TWI_DDR &= ~TWI_MSK;
 27e:	87 b1       	in	r24, 0x07	; 7
 280:	8f 7c       	andi	r24, 0xCF	; 207
 282:	87 b9       	out	0x07, r24	; 7
	// set the Bit Rate
	TWBR = 12;
 284:	8c e0       	ldi	r24, 0x0C	; 12
 286:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0x00;
 28a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWCR = (1<<TWEN);
 28e:	84 e0       	ldi	r24, 0x04	; 4
 290:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 294:	08 95       	ret

00000296 <twi_send_byte>:
}

unsigned char twi_send_byte(unsigned char addr, unsigned char data)
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	c8 2f       	mov	r28, r24
 29c:	d6 2f       	mov	r29, r22
	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 29e:	84 ea       	ldi	r24, 0xA4	; 164
 2a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// wait for SEND
	_twi_wait();
 2a4:	0e 94 3a 01 	call	0x274	; 0x274 <_twi_wait>
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_START && (TWSR & TWI_STATUS) != TWI_REPEAT)
 2a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2ac:	88 7f       	andi	r24, 0xF8	; 248
 2ae:	88 30       	cpi	r24, 0x08	; 8
 2b0:	29 f0       	breq	.+10     	; 0x2bc <twi_send_byte+0x26>
 2b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2b6:	88 7f       	andi	r24, 0xF8	; 248
 2b8:	80 31       	cpi	r24, 0x10	; 16
 2ba:	f1 f4       	brne	.+60     	; 0x2f8 <twi_send_byte+0x62>
		return 1;
	
	// load address and write signal
	// ADDR | R=1(W=0)
	TWDR = addr << 1;
 2bc:	cc 0f       	add	r28, r28
 2be:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 2c2:	84 e8       	ldi	r24, 0x84	; 132
 2c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// wait for SEND
	_twi_wait();
 2c8:	0e 94 3a 01 	call	0x274	; 0x274 <_twi_wait>
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_W_ACK)
 2cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2d0:	88 7f       	andi	r24, 0xF8	; 248
 2d2:	88 31       	cpi	r24, 0x18	; 24
 2d4:	99 f4       	brne	.+38     	; 0x2fc <twi_send_byte+0x66>
		return 2;
	
	// load data
	TWDR = data;
 2d6:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 2da:	84 e8       	ldi	r24, 0x84	; 132
 2dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// wait for SEND
	_twi_wait();
 2e0:	0e 94 3a 01 	call	0x274	; 0x274 <_twi_wait>
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_WD_ACK)
 2e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2e8:	88 7f       	andi	r24, 0xF8	; 248
 2ea:	88 32       	cpi	r24, 0x28	; 40
 2ec:	49 f4       	brne	.+18     	; 0x300 <twi_send_byte+0x6a>
		return 3;
	
	// send STOP condition
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 2ee:	84 e9       	ldi	r24, 0x94	; 148
 2f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	return 0x00;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	05 c0       	rjmp	.+10     	; 0x302 <twi_send_byte+0x6c>
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for SEND
	_twi_wait();
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_START && (TWSR & TWI_STATUS) != TWI_REPEAT)
		return 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <twi_send_byte+0x6c>
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for SEND
	_twi_wait();
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_W_ACK)
		return 2;
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <twi_send_byte+0x6c>
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for SEND
	_twi_wait();
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_WD_ACK)
		return 3;
 300:	83 e0       	ldi	r24, 0x03	; 3
	
	// send STOP condition
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
	return 0x00;
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <main>:
#include "files/lcd_twi.h"


int main(void)
{
	DDRB = 0xff;
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	84 b9       	out	0x04, r24	; 4
	
	twi_init();
 30c:	0e 94 3f 01 	call	0x27e	; 0x27e <twi_init>
	lcd_init();
 310:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_init>

	lcd_send_string("hello world!");
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_send_string>
	lcd_move(0, 1);
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_move>
	lcd_send_string("Lee woo sub ba boo");
 324:	8d e0       	ldi	r24, 0x0D	; 13
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_send_string>
 32c:	ff cf       	rjmp	.-2      	; 0x32c <main+0x24>

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
