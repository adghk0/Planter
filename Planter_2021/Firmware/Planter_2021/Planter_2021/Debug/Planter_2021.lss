
Planter_2021.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000033c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d96  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b0  00000000  00000000  000011d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000689  00000000  00000000  00001a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  0000210c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000466  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047f  00000000  00000000  0000266a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002ae9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 38 01 	call	0x270	; 0x270 <main>
  88:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <lcd_send_cmd_4bit>:
 */ 

#include "lcd_twi.h"

void lcd_send_cmd_4bit(unsigned char cmd_half)
{
  90:	cf 93       	push	r28
  92:	c8 2f       	mov	r28, r24
	twi_send_byte(LCD_ADDR, cmd_half | (1<<LCD_EN) | (lcd_backlight << LCD_BL));
  94:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	8c 2b       	or	r24, r28
  a8:	68 2f       	mov	r22, r24
  aa:	64 60       	ori	r22, 0x04	; 4
  ac:	87 e2       	ldi	r24, 0x27	; 39
  ae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <twi_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	83 ef       	ldi	r24, 0xF3	; 243
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcd_send_cmd_4bit+0x26>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <lcd_send_cmd_4bit+0x2c>
  bc:	00 00       	nop
	_delay_ms(2);
	twi_send_byte(LCD_ADDR, cmd_half | (lcd_backlight << LCD_BL));
  be:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	66 0f       	add	r22, r22
  c6:	77 1f       	adc	r23, r23
  c8:	66 0f       	add	r22, r22
  ca:	77 1f       	adc	r23, r23
  cc:	66 0f       	add	r22, r22
  ce:	77 1f       	adc	r23, r23
  d0:	6c 2b       	or	r22, r28
  d2:	87 e2       	ldi	r24, 0x27	; 39
  d4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <twi_send_byte>
  d8:	83 ef       	ldi	r24, 0xF3	; 243
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_send_cmd_4bit+0x4c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_send_cmd_4bit+0x52>
  e2:	00 00       	nop
	_delay_ms(2);
}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <lcd_send_cmd>:
void lcd_send_cmd(unsigned char cmd)
{
  e8:	cf 93       	push	r28
  ea:	c8 2f       	mov	r28, r24
	lcd_send_cmd_4bit(cmd & 0xf0);
  ec:	80 7f       	andi	r24, 0xF0	; 240
  ee:	0e 94 48 00 	call	0x90	; 0x90 <lcd_send_cmd_4bit>
	lcd_send_cmd_4bit((cmd << 4) & 0xf0);
  f2:	8c 2f       	mov	r24, r28
  f4:	82 95       	swap	r24
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	0e 94 48 00 	call	0x90	; 0x90 <lcd_send_cmd_4bit>
}
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <lcd_send_data_4bit>:
void lcd_send_data_4bit(unsigned char data_half)
{
 100:	cf 93       	push	r28
 102:	c8 2f       	mov	r28, r24
	twi_send_byte(LCD_ADDR, data_half | (1<<LCD_EN) | (1<<LCD_RS) | (lcd_backlight << LCD_BL));
 104:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	68 2b       	or	r22, r24
 118:	65 60       	ori	r22, 0x05	; 5
 11a:	87 e2       	ldi	r24, 0x27	; 39
 11c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <twi_send_byte>
 120:	83 ef       	ldi	r24, 0xF3	; 243
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_send_data_4bit+0x24>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_send_data_4bit+0x2a>
 12a:	00 00       	nop
	_delay_ms(2);
	twi_send_byte(LCD_ADDR, data_half | (1<<LCD_RS) | (lcd_backlight << LCD_BL));
 12c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	6c 2b       	or	r22, r28
 140:	61 60       	ori	r22, 0x01	; 1
 142:	87 e2       	ldi	r24, 0x27	; 39
 144:	0e 94 ff 00 	call	0x1fe	; 0x1fe <twi_send_byte>
 148:	83 ef       	ldi	r24, 0xF3	; 243
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_send_data_4bit+0x4c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_send_data_4bit+0x52>
 152:	00 00       	nop
	_delay_ms(2);
}
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <lcd_send_data>:
void lcd_send_data(char data)
{
 158:	cf 93       	push	r28
 15a:	c8 2f       	mov	r28, r24
	lcd_send_data_4bit((data << 4) & 0xf0);
 15c:	82 95       	swap	r24
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	0e 94 80 00 	call	0x100	; 0x100 <lcd_send_data_4bit>
	lcd_send_data_4bit(data & 0xf0);
 164:	8c 2f       	mov	r24, r28
 166:	80 7f       	andi	r24, 0xF0	; 240
 168:	0e 94 80 00 	call	0x100	; 0x100 <lcd_send_data_4bit>
}
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:

void lcd_init()
{
	twi_init();
 170:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <twi_init>
	
	// 4bit Power On
	lcd_backlight = 0;
 174:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	lcd_send_cmd_4bit(0x30);
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	0e 94 48 00 	call	0x90	; 0x90 <lcd_send_cmd_4bit>
 17e:	87 e8       	ldi	r24, 0x87	; 135
 180:	93 e1       	ldi	r25, 0x13	; 19
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0x12>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_init+0x18>
 188:	00 00       	nop
	_delay_ms(20);
	lcd_send_cmd_4bit(0x30);
 18a:	80 e3       	ldi	r24, 0x30	; 48
 18c:	0e 94 48 00 	call	0x90	; 0x90 <lcd_send_cmd_4bit>
 190:	83 ec       	ldi	r24, 0xC3	; 195
 192:	99 e0       	ldi	r25, 0x09	; 9
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_init+0x24>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_init+0x2a>
 19a:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd_4bit(0x30);
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	0e 94 48 00 	call	0x90	; 0x90 <lcd_send_cmd_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	92 e4       	ldi	r25, 0x42	; 66
 1a4:	9a 95       	dec	r25
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_init+0x34>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_init+0x3a>
	_delay_us(200);
	lcd_send_cmd_4bit(0x20);
 1aa:	80 e2       	ldi	r24, 0x20	; 32
 1ac:	0e 94 48 00 	call	0x90	; 0x90 <lcd_send_cmd_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	83 ec       	ldi	r24, 0xC3	; 195
 1b2:	99 e0       	ldi	r25, 0x09	; 9
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_init+0x44>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcd_init+0x4a>
 1ba:	00 00       	nop
	_delay_ms(10);
	
	// 4bit Initialize
	lcd_send_cmd(0x28); // Function set
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_send_cmd>
	lcd_send_cmd(0x01); // Clear
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_send_cmd>
	lcd_send_cmd(0x06); // Entry set
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_send_cmd>
	lcd_backlight = 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	lcd_send_cmd(0x0c); // Display
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_send_cmd>
 1da:	08 95       	ret

000001dc <_twi_wait>:

#include "twi.h"

void _twi_wait()
{
	while(!(TWCR & (1<<TWINT)));
 1dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1e0:	88 23       	and	r24, r24
 1e2:	e4 f7       	brge	.-8      	; 0x1dc <_twi_wait>
}
 1e4:	08 95       	ret

000001e6 <twi_init>:

void twi_init()
{
	TWI_DDR &= ~TWI_MSK;
 1e6:	87 b1       	in	r24, 0x07	; 7
 1e8:	8f 7c       	andi	r24, 0xCF	; 207
 1ea:	87 b9       	out	0x07, r24	; 7
	// set the Bit Rate
	TWBR = 12;
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0x00;
 1f2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWCR = (1<<TWEN);
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fc:	08 95       	ret

000001fe <twi_send_byte>:
}

unsigned char twi_send_byte(unsigned char addr, unsigned char data)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	c8 2f       	mov	r28, r24
 204:	d6 2f       	mov	r29, r22
	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 206:	84 ea       	ldi	r24, 0xA4	; 164
 208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// wait for SEND
	_twi_wait();
 20c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_twi_wait>
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_START && (TWSR & TWI_STATUS) != TWI_REPEAT)
 210:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 214:	88 7f       	andi	r24, 0xF8	; 248
 216:	88 30       	cpi	r24, 0x08	; 8
 218:	29 f0       	breq	.+10     	; 0x224 <twi_send_byte+0x26>
 21a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 21e:	88 7f       	andi	r24, 0xF8	; 248
 220:	80 31       	cpi	r24, 0x10	; 16
 222:	f1 f4       	brne	.+60     	; 0x260 <twi_send_byte+0x62>
		return 1;
	
	// load address and write signal
	// ADDR | R=1(W=0)
	TWDR = addr << 1;
 224:	cc 0f       	add	r28, r28
 226:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 22a:	84 e8       	ldi	r24, 0x84	; 132
 22c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// wait for SEND
	_twi_wait();
 230:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_twi_wait>
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_W_ACK)
 234:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 238:	88 7f       	andi	r24, 0xF8	; 248
 23a:	88 31       	cpi	r24, 0x18	; 24
 23c:	99 f4       	brne	.+38     	; 0x264 <twi_send_byte+0x66>
		return 2;
	
	// load data
	TWDR = data;
 23e:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 242:	84 e8       	ldi	r24, 0x84	; 132
 244:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// wait for SEND
	_twi_wait();
 248:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_twi_wait>
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_WD_ACK)
 24c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 250:	88 7f       	andi	r24, 0xF8	; 248
 252:	88 32       	cpi	r24, 0x28	; 40
 254:	49 f4       	brne	.+18     	; 0x268 <twi_send_byte+0x6a>
		return 3;
	
	// send STOP condition
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 256:	84 e9       	ldi	r24, 0x94	; 148
 258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	return 0x00;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	05 c0       	rjmp	.+10     	; 0x26a <twi_send_byte+0x6c>
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for SEND
	_twi_wait();
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_START && (TWSR & TWI_STATUS) != TWI_REPEAT)
		return 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	03 c0       	rjmp	.+6      	; 0x26a <twi_send_byte+0x6c>
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for SEND
	_twi_wait();
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_W_ACK)
		return 2;
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	01 c0       	rjmp	.+2      	; 0x26a <twi_send_byte+0x6c>
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for SEND
	_twi_wait();
	// check value for ERROR
	if((TWSR & TWI_STATUS) != TWI_WD_ACK)
		return 3;
 268:	83 e0       	ldi	r24, 0x03	; 3
	
	// send STOP condition
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
	return 0x00;
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <main>:
#include "files/lcd_twi.h"

int main(void)
{
    int i, j;
	DDRB = 0xff;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	84 b9       	out	0x04, r24	; 4
	
	twi_init();
 274:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <twi_init>
	lcd_init();
 278:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>

    while (1) 
    {
		for(i = 0; i < 3; i++)
 27c:	00 e0       	ldi	r16, 0x00	; 0
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	1d c0       	rjmp	.+58     	; 0x2bc <main+0x4c>
		{
			lcd_send_cmd(0x80 | 0x50);
 282:	80 ed       	ldi	r24, 0xD0	; 208
 284:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_send_cmd>
			for(j = 0; j < 16; j++)
 288:	c0 e0       	ldi	r28, 0x00	; 0
 28a:	d0 e0       	ldi	r29, 0x00	; 0
 28c:	09 c0       	rjmp	.+18     	; 0x2a0 <main+0x30>
			{
				lcd_send_data(i * 0x20 + j + 0x20);
 28e:	8c 2f       	mov	r24, r28
 290:	20 e2       	ldi	r18, 0x20	; 32
 292:	02 9f       	mul	r16, r18
 294:	80 0d       	add	r24, r0
 296:	11 24       	eor	r1, r1
 298:	80 5e       	subi	r24, 0xE0	; 224
 29a:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_send_data>
    while (1) 
    {
		for(i = 0; i < 3; i++)
		{
			lcd_send_cmd(0x80 | 0x50);
			for(j = 0; j < 16; j++)
 29e:	21 96       	adiw	r28, 0x01	; 1
 2a0:	c0 31       	cpi	r28, 0x10	; 16
 2a2:	d1 05       	cpc	r29, r1
 2a4:	a4 f3       	brlt	.-24     	; 0x28e <main+0x1e>
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	97 ea       	ldi	r25, 0xA7	; 167
 2aa:	21 e6       	ldi	r18, 0x61	; 97
 2ac:	81 50       	subi	r24, 0x01	; 1
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	20 40       	sbci	r18, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x3c>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x46>
 2b6:	00 00       	nop
	twi_init();
	lcd_init();

    while (1) 
    {
		for(i = 0; i < 3; i++)
 2b8:	0f 5f       	subi	r16, 0xFF	; 255
 2ba:	1f 4f       	sbci	r17, 0xFF	; 255
 2bc:	03 30       	cpi	r16, 0x03	; 3
 2be:	11 05       	cpc	r17, r1
 2c0:	04 f3       	brlt	.-64     	; 0x282 <main+0x12>
 2c2:	dc cf       	rjmp	.-72     	; 0x27c <main+0xc>

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
